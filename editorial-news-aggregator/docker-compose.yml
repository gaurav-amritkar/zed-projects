version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: editorial_postgres
    environment:
      POSTGRES_DB: editorial_news
      POSTGRES_USER: editorial_user
      POSTGRES_PASSWORD: editorial_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - editorial_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U editorial_user -d editorial_news"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: editorial_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - editorial_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: editorial_backend
    environment:
      # Database
      DATABASE_URL: postgresql://editorial_user:editorial_password@postgres:5432/editorial_news

      # Redis
      REDIS_URL: redis://:redis_password@redis:6379/0
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/0

      # Security
      SECRET_KEY: your-super-secret-key-change-in-production

      # CORS
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:3001"]'
      ALLOWED_HOSTS: '["localhost", "127.0.0.1", "backend"]'

      # Environment
      ENVIRONMENT: development
      DEBUG: true
      LOG_LEVEL: INFO

      # External APIs (set these in .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOOGLE_TRANSLATE_API_KEY: ${GOOGLE_TRANSLATE_API_KEY:-}
      NEWS_API_KEY: ${NEWS_API_KEY:-}
      HUGGINGFACE_API_TOKEN: ${HUGGINGFACE_API_TOKEN:-}

      # Summarization
      DEFAULT_SUMMARY_MODEL: facebook/bart-large-cnn
      MAX_SUMMARY_LENGTH: 150
      MIN_SUMMARY_LENGTH: 50

      # Scraping
      REQUEST_DELAY: 1.0
      REQUEST_TIMEOUT: 30
      MAX_RETRIES: 3

      # Content
      SUPPORTED_LANGUAGES: '["en", "hi", "bn", "ta", "mr", "te", "gu", "kn", "ml", "pa"]'
      DEFAULT_LANGUAGE: en
      ARTICLES_PER_PAGE: 20

      # Scheduler
      FETCH_INTERVAL_MINUTES: 60
      CLEANUP_INTERVAL_HOURS: 24
      SUMMARY_BATCH_INTERVAL_MINUTES: 30
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - editorial_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: editorial_celery_worker
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=2
    environment:
      # Database
      DATABASE_URL: postgresql://editorial_user:editorial_password@postgres:5432/editorial_news

      # Redis
      REDIS_URL: redis://:redis_password@redis:6379/0
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/0

      # Security
      SECRET_KEY: your-super-secret-key-change-in-production

      # Environment
      ENVIRONMENT: development
      DEBUG: true
      LOG_LEVEL: INFO

      # External APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOOGLE_TRANSLATE_API_KEY: ${GOOGLE_TRANSLATE_API_KEY:-}
      NEWS_API_KEY: ${NEWS_API_KEY:-}
      HUGGINGFACE_API_TOKEN: ${HUGGINGFACE_API_TOKEN:-}

      # Worker specific
      C_FORCE_ROOT: 1
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - editorial_network
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: editorial_celery_beat
    command: celery -A app.tasks.celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      # Database
      DATABASE_URL: postgresql://editorial_user:editorial_password@postgres:5432/editorial_news

      # Redis
      REDIS_URL: redis://:redis_password@redis:6379/0
      CELERY_BROKER_URL: redis://:redis_password@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:redis_password@redis:6379/0

      # Security
      SECRET_KEY: your-super-secret-key-change-in-production

      # Environment
      ENVIRONMENT: development
      DEBUG: true
      LOG_LEVEL: INFO

      # Scheduler specific
      C_FORCE_ROOT: 1
    volumes:
      - ./backend:/app
      - celery_beat_data:/tmp
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - editorial_network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: editorial_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_ENVIRONMENT=development
      - GENERATE_SOURCEMAP=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - editorial_network
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: editorial_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - editorial_network
    profiles:
      - production

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: editorial_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - editorial_network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: editorial_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - editorial_network
    profiles:
      - monitoring

  # Elasticsearch for full-text search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: editorial_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - editorial_network
    profiles:
      - search
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for Elasticsearch visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: editorial_kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - editorial_network
    profiles:
      - search

  # MinIO for file storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: editorial_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - editorial_network
    profiles:
      - storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: editorial_pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@editorial-aggregator.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - editorial_network
    profiles:
      - admin

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: editorial_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redis_password
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - editorial_network
    profiles:
      - admin

# Networks
networks:
  editorial_network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  celery_beat_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  pgadmin_data:
    driver: local
